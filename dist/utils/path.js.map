{"version":3,"sources":["utils/path.js"],"names":[],"mappings":";;;;;;;;;AASA;;;;;;;gEAMO,iBAA8B,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,yDACI,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,+BAAG,OAAH,CAAW,IAAX,EAAiB,UAAU,GAAV,EAAe,KAAf,EAAsB;AACnC,oCAAI,GAAJ,EAAS;AACL,2CAAO,GAAP;AACH,iCAFD,MAEO;AACH,wCAAI,CAAC,KAAD,IAAU,CAAC,MAAM,MAArB,EAA6B;AACzB,gDAAQ,IAAR;AACH,qCAFD,MAEO;AACH,gDAAQ,KAAR;AACH;AACJ;AACJ,6BAVD;AAWH,yBAZM,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,c;;;;;AAgBtB;;;;;;;;;iEAMO,kBAAgC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,0DACI,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,+BAAG,OAAH,CAAW,IAAX,EAAiB,UAAU,GAAV,EAAe,KAAf,EAAsB;AACnC,oCAAI,GAAJ,EAAS;AACL;AACA,4CAAQ,KAAR;AACH,iCAHD,MAGO;AACH,wCAAI,CAAC,KAAL,EAAY;AACR,gDAAQ,KAAR;AACH,qCAFD,MAEO;AACH,gDAAQ,IAAR;AACH;AACJ;AACJ,6BAXD;AAYH,yBAbM,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,gB;;;;;AAiBtB;;;;;;;;;iEAMO,kBAA2B,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,0DACI,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,+BAAG,MAAH,CAAU,IAAV,EAAgB,UAAU,MAAV,EAAkB;AAC9B,wCAAQ,MAAR;AACH,6BAFD;AAGH,yBAJM,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,W;;;;;AAQtB;;;;;;;;;iEAMO,kBAAqB,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA,0DACI,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,mCAAO,IAAP,EAAa,KAAb,EAAoB,UAAU,GAAV,EAAe;AAC/B,oCAAI,GAAJ,EAAS;AACL,2CAAO,GAAP;AACH,iCAFD,MAEO;AACH,4CAAQ,IAAR;AACH;AACJ,6BAND;AAOH,yBARM,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,K;;;;;AA1EtB;;;;AAIA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,QAAQ,SAAS,MAAT,EAAiB,CAAjB,CAAd","file":"utils/path.js","sourcesContent":["/**\n * Created by Bell on 16/8/5.\n */\n\nconst mkdirp = require('mkdirp');\nconst fs = require('fs');\nconst path = require('path');\nconst _0777 = parseInt('0755', 8);\n\n/**\n * check whether thd directory 'path' is empty\n *\n * @param path\n * @returns {Promise}\n */\nexport async function emptyDirectory(path) {\n    return new Promise(function (resolve, reject) {\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                reject(err);\n            } else {\n                if (!files || !files.length) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            }\n        });\n    });\n}\n\n/**\n * check whether thd directory 'path' is existed\n *\n * @param path\n * @returns {Promise}\n */\nexport async function existedDirectory(path) {\n    return new Promise(function (resolve, reject) {\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                // reject(err);\n                resolve(false);\n            } else {\n                if (!files) {\n                    resolve(false);\n                } else {\n                    resolve(true);\n                }\n            }\n        });\n    });\n}\n\n/**\n * check whether thd file 'path' is existed\n *\n * @param path\n * @returns {Promise}\n */\nexport async function existedFile(path) {\n    return new Promise(function (resolve, reject) {\n        fs.exists(path, function (exists) {\n            resolve(exists);\n        });\n    });\n}\n\n/**\n * mkdir -p\n *\n * @param path\n * @returns {Promise}\n */\nexport async function mkdir(path) {\n    return new Promise(function (resolve, reject) {\n        mkdirp(path, _0777, function (err) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(true);\n            }\n        });\n    });\n}\n\n"],"sourceRoot":"/source/"}